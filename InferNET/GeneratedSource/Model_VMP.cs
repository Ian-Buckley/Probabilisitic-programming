// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Collections;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.1810.501 at 21:34 on Tuesday, 16 October 2018.
	/// </remarks>
	public partial class Model_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_vVector__1 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vVector__1</summary>
		public bool Changed_numberOfIterations_vVector__1_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vVector__1 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vVector__1</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vVector__1_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vVector__1 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vVector__1</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vVector__1_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vVector__1 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vVector__1</summary>
		public bool Changed_numberOfIterationsDecreased_vVector__1_isDone;
		/// <summary>True if Changed_vVector__1 has executed. Set this to false to force re-execution of Changed_vVector__1</summary>
		public bool Changed_vVector__1_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>The constant 'vIDistributionLtint__Gt0'</summary>
		public DistributionRefArray<Discrete,int> vIDistributionLtint__Gt0;
		/// <summary>Message to marginal of 'vint__0'</summary>
		public DistributionRefArray<Discrete,int> vint__0_marginal_F;
		public Wishart vPositiveDefiniteMatrix__1_F_reduced;
		public PositiveDefiniteMatrix[] vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced;
		/// <summary>Message to marginal of 'vPositiveDefiniteMatrix__1'</summary>
		public DistributionRefArray<Wishart,PositiveDefiniteMatrix> vPositiveDefiniteMatrix__1_marginal_F;
		/// <summary>Message from use of 'vPositiveDefiniteMatrix__1'</summary>
		public DistributionRefArray<Wishart,PositiveDefiniteMatrix> vPositiveDefiniteMatrix__1_use_B;
		/// <summary>The constant 'vPositiveDefiniteMatrix0'</summary>
		public PositiveDefiniteMatrix vPositiveDefiniteMatrix0;
		public DistributionRefArray<DistributionRefArray<VectorGaussian,Vector>,Vector[]> vVector__0_index0__B;
		/// <summary>Message to marginal of 'vVector__0'</summary>
		public DistributionRefArray<VectorGaussian,Vector> vVector__0_marginal_F;
		/// <summary>Field backing the vVector__1 property</summary>
		private Vector[] VVector__1;
		public DistributionRefArray<VectorGaussian,Vector> vVector__1_marginal;
		/// <summary>The constant 'vVector1'</summary>
		public DenseVector vVector1;
		/// <summary>Message to marginal of 'vVector5'</summary>
		public Dirichlet vVector5_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vVector__1'</summary>
		public Vector[] vVector__1
		{
			get {
				return this.VVector__1;
			}
			set {
				if ((value!=null)&&(value.Length!=300)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+300)+" was expected for variable \'vVector__1\'");
				}
				this.VVector__1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_vVector__1_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vVector__1_isDone = false;
				this.Changed_numberOfIterations_vVector__1_isDone = false;
				this.Changed_vVector__1_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vVector__1</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vVector__1(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vVector__1_isDone) {
				return ;
			}
			VectorGaussian vVector__0_F_reduced;
			vVector__0_F_reduced = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector1.Count));
			// Create array for 'vVector__0_marginal' Forwards messages.
			this.vVector__0_marginal_F = new DistributionRefArray<VectorGaussian,Vector>(2);
			for(int index0 = 0; index0<2; index0++) {
				this.vVector__0_marginal_F[index0] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector1.Count));
			}
			DistributionRefArray<VectorGaussian,Vector> vVector__0_use_B;
			// Create array for 'vVector__0_use' Backwards messages.
			vVector__0_use_B = new DistributionRefArray<VectorGaussian,Vector>(2);
			for(int index0 = 0; index0<2; index0++) {
				vVector__0_use_B[index0] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector1.Count));
			}
			// Message to 'vVector__0' from VectorGaussian factor
			vVector__0_F_reduced = VectorGaussianOp.SampleAverageLogarithm(this.vVector1, this.vPositiveDefiniteMatrix0, vVector__0_F_reduced);
			Dirichlet vDirichlet1 = Dirichlet.Uniform(2, Sparsity.FromSpec(Microsoft.ML.Probabilistic.Math.StorageType.Dense, 0.0, 0));
			DistributionRefArray<Dirichlet,Vector> vVector5_rep_B;
			// Create array for 'vVector5_rep' Backwards messages.
			vVector5_rep_B = new DistributionRefArray<Dirichlet,Vector>(300);
			for(int index2 = 0; index2<300; index2++) {
				vVector5_rep_B[index2] = ArrayHelper.MakeUniform<Dirichlet>(vDirichlet1);
			}
			Dirichlet vVector5_use_B = ArrayHelper.MakeUniform<Dirichlet>(vDirichlet1);
			this.vVector5_marginal_F = ArrayHelper.MakeUniform<Dirichlet>(vDirichlet1);
			Discrete vint__0_F_reduced;
			vint__0_F_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			// Create array for replicates of 'vint__0_index2__selector_uses_B'
			Discrete[][] vint__0_index2__selector_uses_B = new Discrete[300][];
			for(int index2 = 0; index2<300; index2++) {
				// Create array for 'vint__0_index2__selector_uses' Backwards messages.
				vint__0_index2__selector_uses_B[index2] = new Discrete[3];
				vint__0_index2__selector_uses_B[index2][2] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				vint__0_index2__selector_uses_B[index2][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
				vint__0_index2__selector_uses_B[index2][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			}
			// Create array for replicates of 'vint__0_index2__selector_cases_uses_B'
			Bernoulli[][][] vint__0_index2__selector_cases_uses_B = new Bernoulli[300][][];
			for(int index2 = 0; index2<300; index2++) {
				// Create array for 'vint__0_index2__selector_cases_uses' Backwards messages.
				vint__0_index2__selector_cases_uses_B[index2] = new Bernoulli[2][];
			}
			for(int index0 = 0; index0<2; index0++) {
				for(int index2 = 0; index2<300; index2++) {
					// Create array for 'vint__0_index2__selector_cases_uses' Backwards messages.
					vint__0_index2__selector_cases_uses_B[index2][index0] = new Bernoulli[5];
					vint__0_index2__selector_cases_uses_B[index2][index0][3] = Bernoulli.Uniform();
					vint__0_index2__selector_cases_uses_B[index2][index0][2] = Bernoulli.Uniform();
					vint__0_index2__selector_cases_uses_B[index2][index0][1] = Bernoulli.Uniform();
					vint__0_index2__selector_cases_uses_B[index2][index0][0] = Bernoulli.Uniform();
					vint__0_index2__selector_cases_uses_B[index2][index0][4] = Bernoulli.Uniform();
				}
			}
			PositiveDefiniteMatrix[] vVector__0_index0__F_MeanVariance_reduced = default(PositiveDefiniteMatrix[]);
			// Create array for replicates of 'vVector__0_index0__F_MeanVariance'
			vVector__0_index0__F_MeanVariance_reduced = new PositiveDefiniteMatrix[2];
			for(int index0 = 0; index0<2; index0++) {
				// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
				vVector__0_index0__F_MeanVariance_reduced[index0] = VectorGaussianOp.MeanVarianceInit(this.vVector__0_marginal_F[index0]);
			}
			Vector[] vVector__0_index0__F_MeanMean_reduced = default(Vector[]);
			// Create array for replicates of 'vVector__0_index0__F_MeanMean'
			vVector__0_index0__F_MeanMean_reduced = new Vector[2];
			for(int index0 = 0; index0<2; index0++) {
				// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
				vVector__0_index0__F_MeanMean_reduced[index0] = VectorGaussianOp.MeanMeanInit(this.vVector__0_marginal_F[index0]);
			}
			// Create array for replicates of 'vPositiveDefiniteMatrix__1_index0__B'
			DistributionRefArray<DistributionRefArray<Wishart,PositiveDefiniteMatrix>,PositiveDefiniteMatrix[]> vPositiveDefiniteMatrix__1_index0__B = new DistributionRefArray<DistributionRefArray<Wishart,PositiveDefiniteMatrix>,PositiveDefiniteMatrix[]>(300);
			for(int index2 = 0; index2<300; index2++) {
				// Create array for replicates of 'vPositiveDefiniteMatrix__1_index0__B'
				vPositiveDefiniteMatrix__1_index0__B[index2] = new DistributionRefArray<Wishart,PositiveDefiniteMatrix>(2);
			}
			for(int index0 = 0; index0<2; index0++) {
				for(int index2 = 0; index2<300; index2++) {
					vPositiveDefiniteMatrix__1_index0__B[index2][index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix0.Rows));
				}
			}
			// Create array for replicates of 'vPositiveDefiniteMatrix__1_rep_B'
			DistributionRefArray<DistributionRefArray<Wishart,PositiveDefiniteMatrix>,PositiveDefiniteMatrix[]> vPositiveDefiniteMatrix__1_rep_B = new DistributionRefArray<DistributionRefArray<Wishart,PositiveDefiniteMatrix>,PositiveDefiniteMatrix[]>(2);
			for(int index0 = 0; index0<2; index0++) {
				// Create array for 'vPositiveDefiniteMatrix__1_rep' Backwards messages.
				vPositiveDefiniteMatrix__1_rep_B[index0] = new DistributionRefArray<Wishart,PositiveDefiniteMatrix>(300);
				for(int index2 = 0; index2<300; index2++) {
					vPositiveDefiniteMatrix__1_rep_B[index0][index2] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix0.Rows));
				}
			}
			double[] vPositiveDefiniteMatrix__1_index0__F_PrecisionMeanLogDet_reduced = default(double[]);
			// Create array for replicates of 'vPositiveDefiniteMatrix__1_index0__F_PrecisionMeanLogDet'
			vPositiveDefiniteMatrix__1_index0__F_PrecisionMeanLogDet_reduced = new double[2];
			for(int index0 = 0; index0<2; index0++) {
				vPositiveDefiniteMatrix__1_index0__F_PrecisionMeanLogDet_reduced[index0] = default(double);
			}
			// Create array for replicates of 'vint__0_index2__selector_cases_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vint__0_index2__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(300);
			for(int index2 = 0; index2<300; index2++) {
				// Create array for 'vint__0_index2__selector_cases' Backwards messages.
				vint__0_index2__selector_cases_B[index2] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			for(int index0 = 0; index0<2; index0++) {
				for(int index2 = 0; index2<300; index2++) {
					vint__0_index2__selector_cases_B[index2][index0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'vint__0_index2__selector_B'
			DistributionRefArray<Discrete,int> vint__0_index2__selector_B = new DistributionRefArray<Discrete,int>(300);
			for(int index2 = 0; index2<300; index2++) {
				vint__0_index2__selector_B[index2] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(2));
			}
			// Create array for replicates of 'vVector__0_rep_B'
			DistributionRefArray<DistributionRefArray<VectorGaussian,Vector>,Vector[]> vVector__0_rep_B = new DistributionRefArray<DistributionRefArray<VectorGaussian,Vector>,Vector[]>(2);
			for(int index0 = 0; index0<2; index0++) {
				// Create array for 'vVector__0_rep' Backwards messages.
				vVector__0_rep_B[index0] = new DistributionRefArray<VectorGaussian,Vector>(300);
				for(int index2 = 0; index2<300; index2++) {
					vVector__0_rep_B[index0][index2] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector1.Count));
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index0 = 0; index0<2; index0++) {
					for(int index2 = 0; index2<300; index2++) {
						// Message to 'vVector__0_rep' from EnterOne factor
						vVector__0_rep_B[index0][index2] = GateEnterOneOp<Vector>.ValueAverageLogarithm<VectorGaussian>(this.vVector__0_index0__B[index2][index0], this.vint__0_marginal_F[index2], index0, vVector__0_rep_B[index0][index2]);
					}
					// Message to 'vVector__0_use' from Replicate factor
					vVector__0_use_B[index0] = ReplicateOp.DefAverageLogarithm<VectorGaussian>(vVector__0_rep_B[index0], vVector__0_use_B[index0]);
					// Message to 'vVector__0_marginal' from Variable factor
					this.vVector__0_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<VectorGaussian>(vVector__0_use_B[index0], vVector__0_F_reduced, this.vVector__0_marginal_F[index0]);
					// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
					vVector__0_index0__F_MeanVariance_reduced[index0] = VectorGaussianOp.MeanVariance(this.vVector__0_marginal_F[index0], vVector__0_index0__F_MeanVariance_reduced[index0]);
					// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
					vVector__0_index0__F_MeanMean_reduced[index0] = VectorGaussianOp.MeanMean(this.vVector__0_marginal_F[index0], vVector__0_index0__F_MeanVariance_reduced[index0], vVector__0_index0__F_MeanMean_reduced[index0]);
					for(int index2 = 0; index2<300; index2++) {
						// Message to 'vPositiveDefiniteMatrix__1_index0_' from VectorGaussian factor
						vPositiveDefiniteMatrix__1_index0__B[index2][index0] = VectorGaussianOp.PrecisionAverageLogarithm(this.VVector__1[index2], this.vVector__0_marginal_F[index0], vVector__0_index0__F_MeanMean_reduced[index0], vVector__0_index0__F_MeanVariance_reduced[index0], vPositiveDefiniteMatrix__1_index0__B[index2][index0]);
						// Message to 'vPositiveDefiniteMatrix__1_rep' from EnterOne factor
						vPositiveDefiniteMatrix__1_rep_B[index0][index2] = GateEnterOneOp<PositiveDefiniteMatrix>.ValueAverageLogarithm<Wishart>(vPositiveDefiniteMatrix__1_index0__B[index2][index0], this.vint__0_marginal_F[index2], index0, vPositiveDefiniteMatrix__1_rep_B[index0][index2]);
					}
					// Message to 'vPositiveDefiniteMatrix__1_use' from Replicate factor
					this.vPositiveDefiniteMatrix__1_use_B[index0] = ReplicateOp.DefAverageLogarithm<Wishart>(vPositiveDefiniteMatrix__1_rep_B[index0], this.vPositiveDefiniteMatrix__1_use_B[index0]);
					// Message to 'vPositiveDefiniteMatrix__1_marginal' from Variable factor
					this.vPositiveDefiniteMatrix__1_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<Wishart>(this.vPositiveDefiniteMatrix__1_use_B[index0], this.vPositiveDefiniteMatrix__1_F_reduced, this.vPositiveDefiniteMatrix__1_marginal_F[index0]);
					// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
					this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0] = VectorGaussianOp.PrecisionMean(this.vPositiveDefiniteMatrix__1_marginal_F[index0], this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0]);
					for(int index2 = 0; index2<300; index2++) {
						// Message to 'vVector__0_index0_' from VectorGaussian factor
						this.vVector__0_index0__B[index2][index0] = VectorGaussianOp.MeanAverageLogarithm(this.VVector__1[index2], this.vPositiveDefiniteMatrix__1_marginal_F[index0], this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0], this.vVector__0_index0__B[index2][index0]);
					}
					// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
					vPositiveDefiniteMatrix__1_index0__F_PrecisionMeanLogDet_reduced[index0] = VectorGaussianOp.PrecisionMeanLogDet(this.vPositiveDefiniteMatrix__1_marginal_F[index0]);
					for(int index2 = 0; index2<300; index2++) {
						// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
						vint__0_index2__selector_cases_uses_B[index2][index0][4] = Bernoulli.FromLogOdds(VectorGaussianOp.AverageLogFactor(this.VVector__1[index2], this.vVector__0_marginal_F[index0], vVector__0_index0__F_MeanMean_reduced[index0], vVector__0_index0__F_MeanVariance_reduced[index0], this.vPositiveDefiniteMatrix__1_marginal_F[index0], this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0], vPositiveDefiniteMatrix__1_index0__F_PrecisionMeanLogDet_reduced[index0]));
						// Message to 'vint__0_index2__selector_cases' from Replicate factor
						vint__0_index2__selector_cases_B[index2][index0] = ReplicateOp.DefAverageLogarithm<Bernoulli>(vint__0_index2__selector_cases_uses_B[index2][index0], vint__0_index2__selector_cases_B[index2][index0]);
					}
				}
				for(int index2 = 0; index2<300; index2++) {
					// Message to 'vint__0_index2__selector_uses' from CasesInt factor
					vint__0_index2__selector_uses_B[index2][0] = IntCasesOp.IAverageLogarithm(vint__0_index2__selector_cases_B[index2], vint__0_index2__selector_uses_B[index2][0]);
					// Message to 'vint__0_index2__selector' from Replicate factor
					vint__0_index2__selector_B[index2] = ReplicateOp.DefAverageLogarithm<Discrete>(vint__0_index2__selector_uses_B[index2], vint__0_index2__selector_B[index2]);
					// Message to 'vVector5_rep' from Discrete factor
					vVector5_rep_B[index2] = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.vint__0_marginal_F[index2], vVector5_rep_B[index2]);
				}
				// Message to 'vVector5_use' from Replicate factor
				vVector5_use_B = ReplicateOp.DefAverageLogarithm<Dirichlet>(vVector5_rep_B, vVector5_use_B);
				// Message to 'vVector5_marginal' from Variable factor
				this.vVector5_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(vVector5_use_B, vDirichlet1, this.vVector5_marginal_F);
				// Message to 'vint__0' from Discrete factor
				vint__0_F_reduced = DiscreteFromDirichletOp.SampleAverageLogarithm(this.vVector5_marginal_F, vint__0_F_reduced);
				for(int index2 = 0; index2<300; index2++) {
					// Message to 'vint__0_marginal' from Variable factor
					this.vint__0_marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(vint__0_index2__selector_B[index2], vint__0_F_reduced, this.vint__0_marginal_F[index2]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int index0 = 0; index0<2; index0++) {
				for(int index2 = 0; index2<300; index2++) {
					// Message to 'vVector__0_rep' from EnterOne factor
					vVector__0_rep_B[index0][index2] = GateEnterOneOp<Vector>.ValueAverageLogarithm<VectorGaussian>(this.vVector__0_index0__B[index2][index0], this.vint__0_marginal_F[index2], index0, vVector__0_rep_B[index0][index2]);
				}
				// Message to 'vVector__0_use' from Replicate factor
				vVector__0_use_B[index0] = ReplicateOp.DefAverageLogarithm<VectorGaussian>(vVector__0_rep_B[index0], vVector__0_use_B[index0]);
				// Message to 'vVector__0_marginal' from Variable factor
				this.vVector__0_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<VectorGaussian>(vVector__0_use_B[index0], vVector__0_F_reduced, this.vVector__0_marginal_F[index0]);
				// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
				vVector__0_index0__F_MeanVariance_reduced[index0] = VectorGaussianOp.MeanVariance(this.vVector__0_marginal_F[index0], vVector__0_index0__F_MeanVariance_reduced[index0]);
				// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
				vVector__0_index0__F_MeanMean_reduced[index0] = VectorGaussianOp.MeanMean(this.vVector__0_marginal_F[index0], vVector__0_index0__F_MeanVariance_reduced[index0], vVector__0_index0__F_MeanMean_reduced[index0]);
				for(int index2 = 0; index2<300; index2++) {
					// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
					vint__0_index2__selector_cases_uses_B[index2][index0][4] = Bernoulli.FromLogOdds(VectorGaussianOp.AverageLogFactor(this.VVector__1[index2], this.vVector__0_marginal_F[index0], vVector__0_index0__F_MeanMean_reduced[index0], vVector__0_index0__F_MeanVariance_reduced[index0], this.vPositiveDefiniteMatrix__1_marginal_F[index0], this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0], vPositiveDefiniteMatrix__1_index0__F_PrecisionMeanLogDet_reduced[index0]));
					// Message to 'vint__0_index2__selector_cases' from Replicate factor
					vint__0_index2__selector_cases_B[index2][index0] = ReplicateOp.DefAverageLogarithm<Bernoulli>(vint__0_index2__selector_cases_uses_B[index2][index0], vint__0_index2__selector_cases_B[index2][index0]);
				}
			}
			for(int index2 = 0; index2<300; index2++) {
				// Message to 'vint__0_index2__selector_uses' from CasesInt factor
				vint__0_index2__selector_uses_B[index2][0] = IntCasesOp.IAverageLogarithm(vint__0_index2__selector_cases_B[index2], vint__0_index2__selector_uses_B[index2][0]);
				// Message to 'vint__0_index2__selector' from Replicate factor
				vint__0_index2__selector_B[index2] = ReplicateOp.DefAverageLogarithm<Discrete>(vint__0_index2__selector_uses_B[index2], vint__0_index2__selector_B[index2]);
				// Message to 'vint__0_marginal' from Variable factor
				this.vint__0_marginal_F[index2] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(vint__0_index2__selector_B[index2], vint__0_F_reduced, this.vint__0_marginal_F[index2]);
			}
			for(int index0 = 0; index0<2; index0++) {
				for(int index2 = 0; index2<300; index2++) {
					// Message to 'vPositiveDefiniteMatrix__1_index0_' from VectorGaussian factor
					vPositiveDefiniteMatrix__1_index0__B[index2][index0] = VectorGaussianOp.PrecisionAverageLogarithm(this.VVector__1[index2], this.vVector__0_marginal_F[index0], vVector__0_index0__F_MeanMean_reduced[index0], vVector__0_index0__F_MeanVariance_reduced[index0], vPositiveDefiniteMatrix__1_index0__B[index2][index0]);
					// Message to 'vPositiveDefiniteMatrix__1_rep' from EnterOne factor
					vPositiveDefiniteMatrix__1_rep_B[index0][index2] = GateEnterOneOp<PositiveDefiniteMatrix>.ValueAverageLogarithm<Wishart>(vPositiveDefiniteMatrix__1_index0__B[index2][index0], this.vint__0_marginal_F[index2], index0, vPositiveDefiniteMatrix__1_rep_B[index0][index2]);
				}
				// Message to 'vPositiveDefiniteMatrix__1_use' from Replicate factor
				this.vPositiveDefiniteMatrix__1_use_B[index0] = ReplicateOp.DefAverageLogarithm<Wishart>(vPositiveDefiniteMatrix__1_rep_B[index0], this.vPositiveDefiniteMatrix__1_use_B[index0]);
				// Message to 'vPositiveDefiniteMatrix__1_marginal' from Variable factor
				this.vPositiveDefiniteMatrix__1_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<Wishart>(this.vPositiveDefiniteMatrix__1_use_B[index0], this.vPositiveDefiniteMatrix__1_F_reduced, this.vPositiveDefiniteMatrix__1_marginal_F[index0]);
			}
			for(int index2 = 0; index2<300; index2++) {
				// Message to 'vVector5_rep' from Discrete factor
				vVector5_rep_B[index2] = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.vint__0_marginal_F[index2], vVector5_rep_B[index2]);
			}
			// Message to 'vVector5_use' from Replicate factor
			vVector5_use_B = ReplicateOp.DefAverageLogarithm<Dirichlet>(vVector5_rep_B, vVector5_use_B);
			// Message to 'vVector5_marginal' from Variable factor
			this.vVector5_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(vVector5_use_B, vDirichlet1, this.vVector5_marginal_F);
			this.Changed_numberOfIterations_vVector__1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vVector__1</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_vVector__1(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_vVector__1_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_vVector__1_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<2; index0++) {
				this.vPositiveDefiniteMatrix__1_use_B[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix0.Rows));
				this.vPositiveDefiniteMatrix__1_marginal_F[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix0.Rows));
				// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
				this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0] = VectorGaussianOp.PrecisionMeanInit(this.vPositiveDefiniteMatrix__1_marginal_F[index0]);
			}
			for(int index2 = 0; index2<300; index2++) {
				this.vint__0_marginal_F[index2] = ArrayHelper.MakeCopy<Discrete>(this.vIDistributionLtint__Gt0[index2]);
			}
			for(int index0 = 0; index0<2; index0++) {
				for(int index2 = 0; index2<300; index2++) {
					this.vVector__0_index0__B[index2][index0] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector1.Count));
				}
				// Message to 'vPositiveDefiniteMatrix__1_marginal' from Variable factor
				this.vPositiveDefiniteMatrix__1_marginal_F[index0] = VariableVmpOp.MarginalAverageLogarithm<Wishart>(this.vPositiveDefiniteMatrix__1_use_B[index0], this.vPositiveDefiniteMatrix__1_F_reduced, this.vPositiveDefiniteMatrix__1_marginal_F[index0]);
				// Message to 'vint__0_index2__selector_cases_uses' from VectorGaussian factor
				this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0] = VectorGaussianOp.PrecisionMean(this.vPositiveDefiniteMatrix__1_marginal_F[index0], this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0]);
			}
			this.Changed_numberOfIterationsDecreased_Init_vVector__1_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_vVector__1_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vVector__1</summary>
		private void Changed_numberOfIterationsDecreased_vVector__1()
		{
			if (this.Changed_numberOfIterationsDecreased_vVector__1_isDone) {
				return ;
			}
			for(int index0 = 0; index0<2; index0++) {
				for(int index2 = 0; index2<300; index2++) {
					// Message to 'vVector__0_index0_' from VectorGaussian factor
					this.vVector__0_index0__B[index2][index0] = VectorGaussianOp.MeanAverageLogarithm(this.VVector__1[index2], this.vPositiveDefiniteMatrix__1_marginal_F[index0], this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced[index0], this.vVector__0_index0__B[index2][index0]);
				}
			}
			this.Changed_numberOfIterationsDecreased_vVector__1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vVector__1</summary>
		private void Changed_vVector__1()
		{
			if (this.Changed_vVector__1_isDone) {
				return ;
			}
			this.vVector__1_marginal = new DistributionRefArray<VectorGaussian,Vector>(300, delegate(int index2) {
				return ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector1.Count));
			});
			this.vVector__1_marginal = Distribution.SetPoint<DistributionRefArray<VectorGaussian,Vector>,Vector[]>(this.vVector__1_marginal, this.VVector__1);
			this.Changed_vVector__1_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vVector1 = DenseVector.FromArray(new double[2] {0.0, 0.0});
			this.vPositiveDefiniteMatrix0 = new PositiveDefiniteMatrix(new double[2, 2] {{0.01, 0.0}, {0.0, 0.01}});
			// Message to 'vPositiveDefiniteMatrix__1' from SampleFromShapeAndScale factor
			this.vPositiveDefiniteMatrix__1_F_reduced = WishartFromShapeAndScaleOp.SampleAverageLogarithm(100.0, this.vPositiveDefiniteMatrix0);
			// Create array for 'vPositiveDefiniteMatrix__1_use' Backwards messages.
			this.vPositiveDefiniteMatrix__1_use_B = new DistributionRefArray<Wishart,PositiveDefiniteMatrix>(2);
			// Create array for 'vPositiveDefiniteMatrix__1_marginal' Forwards messages.
			this.vPositiveDefiniteMatrix__1_marginal_F = new DistributionRefArray<Wishart,PositiveDefiniteMatrix>(2);
			// Create array for replicates of 'vPositiveDefiniteMatrix__1_index0__F_PrecisionMean'
			this.vPositiveDefiniteMatrix__1_index0__F_PrecisionMean_reduced = new PositiveDefiniteMatrix[2];
			this.vIDistributionLtint__Gt0 = new DistributionRefArray<Discrete,int>(new Discrete[300] {Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(1, 2), Discrete.PointMass(0, 2), Discrete.PointMass(0, 2)});
			// Create array for 'vint__0_marginal' Forwards messages.
			this.vint__0_marginal_F = new DistributionRefArray<Discrete,int>(300);
			// Create array for replicates of 'vVector__0_index0__B'
			this.vVector__0_index0__B = new DistributionRefArray<DistributionRefArray<VectorGaussian,Vector>,Vector[]>(300);
			for(int index2 = 0; index2<300; index2++) {
				// Create array for replicates of 'vVector__0_index0__B'
				this.vVector__0_index0__B[index2] = new DistributionRefArray<VectorGaussian,Vector>(2);
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_vVector__1_isDone = false;
					this.Changed_numberOfIterationsDecreased_vVector__1_isDone = false;
				}
				this.Changed_numberOfIterations_vVector__1_isDone = false;
			}
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_vVector__1(initialise);
			this.Changed_numberOfIterationsDecreased_vVector__1();
			this.Changed_numberOfIterations_vVector__1(numberOfIterations);
			this.Changed_vVector__1();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vVector__1") {
				return this.vVector__1;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vVector__0") {
				return this.VVector__0Marginal();
			}
			if (variableName=="vPositiveDefiniteMatrix__1") {
				return this.VPositiveDefiniteMatrix__1Marginal();
			}
			if (variableName=="vVector5") {
				return this.VVector5Marginal();
			}
			if (variableName=="vint__0") {
				return this.Vint__0Marginal();
			}
			if (variableName=="vVector__1") {
				return this.VVector__1Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vVector__1") {
				this.vVector__1 = (Vector[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> Vint__0Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionRefArray<Discrete,int>>(this.vint__0_marginal_F);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vPositiveDefiniteMatrix__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Wishart,PositiveDefiniteMatrix> VPositiveDefiniteMatrix__1Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionRefArray<Wishart,PositiveDefiniteMatrix>>(this.vPositiveDefiniteMatrix__1_marginal_F);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<VectorGaussian,Vector> VVector__0Marginal()
		{
			return this.vVector__0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<VectorGaussian,Vector> VVector__1Marginal()
		{
			return this.vVector__1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector5' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Dirichlet VVector5Marginal()
		{
			return this.vVector5_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
