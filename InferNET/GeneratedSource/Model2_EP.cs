// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Maths;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.7.1803.1901 at 2:35 PM on Thursday, August 16, 2018.
	/// </remarks>
	public partial class Model2_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_vdouble__7_vVector__3 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vdouble__7_vVector__3</summary>
		public bool Changed_numberOfIterations_vdouble__7_vVector__3_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isInitialised;
		/// <summary>True if Changed_vdouble__7 has executed. Set this to false to force re-execution of Changed_vdouble__7</summary>
		public bool Changed_vdouble__7_isDone;
		/// <summary>True if Changed_vVector__3 has executed. Set this to false to force re-execution of Changed_vVector__3</summary>
		public bool Changed_vVector__3_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'vdouble__10'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__10_marginal_F;
		/// <summary>Message to marginal of 'vdouble__11'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__11_marginal_F;
		/// <summary>Message to marginal of 'vdouble__12'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__12_marginal_F;
		/// <summary>Message to marginal of 'vdouble__13'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__13_marginal_F;
		/// <summary>Field backing the vdouble__7 property</summary>
		private double[] Vdouble__7;
		public DistributionStructArray<Gaussian,double> vdouble__7_marginal;
		public DistributionStructArray<Gaussian,double> vdouble__8_F;
		/// <summary>Message to marginal of 'vdouble__8'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__8_marginal_F;
		/// <summary>Message to marginal of 'vdouble17'</summary>
		public Gamma vdouble17_marginal_F;
		public DistributionStructArray<Gamma,double> vdouble17_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public Gamma vdouble17_rep_B_toDef;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public Gamma vdouble17_uses_B_toDef;
		/// <summary>Messages to use of 'vdouble17'</summary>
		public Gamma[] vdouble17_uses_F;
		/// <summary>The constant 'vGamma2'</summary>
		public Gamma vGamma2;
		/// <summary>Field backing the vVector__3 property</summary>
		private Vector[] VVector__3;
		public PointMass<Vector[]> vVector__3_marginal;
		/// <summary>Message to marginal of 'vVector9'</summary>
		public VectorGaussian vVector9_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__7'</summary>
		public double[] vdouble__7
		{
			get {
				return this.Vdouble__7;
			}
			set {
				if ((value!=null)&&(value.Length!=23)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+23)+" was expected for variable \'vdouble__7\'");
				}
				this.Vdouble__7 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isInitialised = false;
				this.Changed_numberOfIterations_vdouble__7_vVector__3_isDone = false;
				this.Changed_vdouble__7_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vVector__3'</summary>
		public Vector[] vVector__3
		{
			get {
				return this.VVector__3;
			}
			set {
				if ((value!=null)&&(value.Length!=23)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+23)+" was expected for variable \'vVector__3\'");
				}
				this.VVector__3 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isInitialised = false;
				this.Changed_numberOfIterations_vdouble__7_vVector__3_isDone = false;
				this.Changed_vVector__3_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vdouble__7 and vVector__3</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vdouble__7_vVector__3(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vdouble__7_vVector__3_isDone) {
				return ;
			}
			VectorGaussian vVectorGaussian2 = VectorGaussian.FromNatural(DenseVector.FromArray(new double[2] {0.0, 0.0}), new PositiveDefiniteMatrix(new double[2, 2] {{1.0, 0.0}, {0.0, 1.0}}));
			this.vVector9_marginal_F = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			VectorGaussian[] vVector9_uses_F;
			VectorGaussian[] vVector9_uses_B;
			// Create array for 'vVector9_uses' Forwards messages.
			vVector9_uses_F = new VectorGaussian[3];
			// Create array for 'vVector9_uses' Backwards messages.
			vVector9_uses_B = new VectorGaussian[3];
			vVector9_uses_B[2] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			vVector9_uses_B[1] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			vVector9_uses_B[0] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			vVector9_uses_F[2] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			vVector9_uses_F[1] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			vVector9_uses_F[0] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			VectorGaussian vVector9_uses_F_marginal;
			// Message to 'vVector9_uses' from Replicate factor
			vVector9_uses_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(vVectorGaussian2);
			VectorGaussian vVector9_rep_F_marginal;
			// Message to 'vVector9_rep' from Replicate factor
			vVector9_rep_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(vVector9_uses_F[0]);
			VectorGaussian vVector9_rep_B_toDef;
			// Message to 'vVector9_rep' from Replicate factor
			vVector9_rep_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(vVector9_uses_F[0]);
			DistributionRefArray<VectorGaussian,Vector> vVector9_rep_F;
			// Create array for 'vVector9_rep' Forwards messages.
			vVector9_rep_F = new DistributionRefArray<VectorGaussian,Vector>(23);
			for(int index3 = 0; index3<23; index3++) {
				vVector9_rep_F[index3] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			}
			// Create array for replicates of 'vVector9_rep_F_index3__AMean'
			DenseVector[] vVector9_rep_F_index3__AMean = new DenseVector[23];
			for(int index3 = 0; index3<23; index3++) {
				// Message to 'vdouble__8' from InnerProduct factor
				vVector9_rep_F_index3__AMean[index3] = InnerProductOpBase.AMeanInit(vVector9_rep_F[index3]);
			}
			// Create array for replicates of 'vVector9_rep_F_index3__AVariance'
			PositiveDefiniteMatrix[] vVector9_rep_F_index3__AVariance = new PositiveDefiniteMatrix[23];
			for(int index3 = 0; index3<23; index3++) {
				// Message to 'vdouble__8' from InnerProduct factor
				vVector9_rep_F_index3__AVariance[index3] = InnerProductOpBase.AVarianceInit(vVector9_rep_F[index3]);
			}
			Gamma[] vdouble17_uses_B;
			// Create array for 'vdouble17_uses' Backwards messages.
			vdouble17_uses_B = new Gamma[3];
			vdouble17_uses_B[2] = Gamma.Uniform();
			vdouble17_uses_B[1] = Gamma.Uniform();
			vdouble17_uses_B[0] = Gamma.Uniform();
			Gamma vdouble17_uses_F_marginal;
			// Message to 'vdouble17_uses' from Replicate factor
			vdouble17_uses_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.vGamma2);
			Gamma vdouble17_rep_F_marginal;
			// Message to 'vdouble17_rep' from Replicate factor
			vdouble17_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.vdouble17_uses_F[0]);
			DistributionStructArray<Gamma,double> vdouble17_rep_F;
			// Create array for 'vdouble17_rep' Forwards messages.
			vdouble17_rep_F = new DistributionStructArray<Gamma,double>(23);
			for(int index3 = 0; index3<23; index3++) {
				vdouble17_rep_F[index3] = Gamma.Uniform();
			}
			DistributionStructArray<Gaussian,double> vdouble__8_use_B;
			// Create array for 'vdouble__8_use' Backwards messages.
			vdouble__8_use_B = new DistributionStructArray<Gaussian,double>(23);
			for(int index3 = 0; index3<23; index3++) {
				vdouble__8_use_B[index3] = Gaussian.Uniform();
			}
			DistributionRefArray<VectorGaussian,Vector> vVector9_rep_B;
			// Create array for 'vVector9_rep' Backwards messages.
			vVector9_rep_B = new DistributionRefArray<VectorGaussian,Vector>(23);
			for(int index3 = 0; index3<23; index3++) {
				vVector9_rep_B[index3] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
			}
			VectorGaussian vVector9_uses_B_toDef;
			// Message to 'vVector9_uses' from Replicate factor
			vVector9_uses_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(vVectorGaussian2);
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'vdouble17_uses' from Replicate factor
				vdouble17_uses_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.vdouble17_uses_B_toDef, this.vGamma2, vdouble17_uses_F_marginal);
				// Message to 'vdouble17_uses' from Replicate factor
				this.vdouble17_uses_F[0] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.vdouble17_rep_B_toDef, vdouble17_uses_F_marginal, 0, this.vdouble17_uses_F[0]);
				// Message to 'vdouble17_rep' from Replicate factor
				vdouble17_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.vdouble17_rep_B_toDef, this.vdouble17_uses_F[0], vdouble17_rep_F_marginal);
				for(int index3 = 0; index3<23; index3++) {
					// Message to 'vdouble17_rep' from Replicate factor
					vdouble17_rep_F[index3] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.vdouble17_rep_B[index3], vdouble17_rep_F_marginal, index3, vdouble17_rep_F[index3]);
					// Message to 'vdouble__8_use' from GaussianFromMeanAndVariance factor
					vdouble__8_use_B[index3] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble__7[index3], this.vdouble__8_F[index3], vdouble17_rep_F[index3]);
					// Message to 'vVector9_rep' from InnerProduct factor
					vVector9_rep_B[index3] = InnerProductOpBase.AAverageConditional(vdouble__8_use_B[index3], this.VVector__3[index3], vVector9_rep_B[index3]);
				}
				// Message to 'vVector9_rep' from Replicate factor
				vVector9_rep_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(vVector9_rep_B, vVector9_rep_B_toDef);
				// Message to 'vVector9_uses' from Replicate factor
				vVector9_uses_B[0] = ArrayHelper.SetTo<VectorGaussian>(vVector9_uses_B[0], vVector9_rep_B_toDef);
				// Message to 'vVector9_uses' from Replicate factor
				vVector9_uses_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(vVector9_uses_B, vVector9_uses_B_toDef);
				// Message to 'vVector9_uses' from Replicate factor
				vVector9_uses_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(vVector9_uses_B_toDef, vVectorGaussian2, vVector9_uses_F_marginal);
				// Message to 'vVector9_uses' from Replicate factor
				vVector9_uses_F[0] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(vVector9_rep_B_toDef, vVector9_uses_F_marginal, 0, vVector9_uses_F[0]);
				// Message to 'vVector9_rep' from Replicate factor
				vVector9_rep_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(vVector9_rep_B_toDef, vVector9_uses_F[0], vVector9_rep_F_marginal);
				for(int index3 = 0; index3<23; index3++) {
					// Message to 'vVector9_rep' from Replicate factor
					vVector9_rep_F[index3] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(vVector9_rep_B[index3], vVector9_rep_F_marginal, index3, vVector9_rep_F[index3]);
					// Message to 'vdouble__8' from InnerProduct factor
					vVector9_rep_F_index3__AVariance[index3] = InnerProductOpBase.AVariance(vVector9_rep_F[index3], vVector9_rep_F_index3__AVariance[index3]);
					// Message to 'vdouble__8' from InnerProduct factor
					vVector9_rep_F_index3__AMean[index3] = InnerProductOpBase.AMean(vVector9_rep_F[index3], vVector9_rep_F_index3__AVariance[index3], vVector9_rep_F_index3__AMean[index3]);
					// Message to 'vdouble__8' from InnerProduct factor
					this.vdouble__8_F[index3] = InnerProductOpBase.InnerProductAverageConditional(vVector9_rep_F_index3__AMean[index3], vVector9_rep_F_index3__AVariance[index3], this.VVector__3[index3]);
					// Message to 'vdouble17_rep' from GaussianFromMeanAndVariance factor
					this.vdouble17_rep_B[index3] = GaussianFromMeanAndVarianceOp.VarianceAverageConditional(this.Vdouble__7[index3], this.vdouble__8_F[index3], vdouble17_rep_F[index3]);
				}
				// Message to 'vdouble17_rep' from Replicate factor
				this.vdouble17_rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.vdouble17_rep_B, this.vdouble17_rep_B_toDef);
				// Message to 'vdouble17_uses' from Replicate factor
				vdouble17_uses_B[0] = ArrayHelper.SetTo<Gamma>(vdouble17_uses_B[0], this.vdouble17_rep_B_toDef);
				// Message to 'vdouble17_uses' from Replicate factor
				this.vdouble17_uses_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(vdouble17_uses_B, this.vdouble17_uses_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'vVector9_marginal' from Variable factor
			this.vVector9_marginal_F = VariableOp.MarginalAverageConditional<VectorGaussian>(vVector9_uses_B_toDef, vVectorGaussian2, this.vVector9_marginal_F);
			VectorGaussian vVector9_rep2_B_toDef;
			// Message to 'vVector9_rep2' from Replicate factor
			vVector9_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(vVector9_uses_F[1]);
			VectorGaussian vVector9_rep2_F_marginal;
			// Message to 'vVector9_rep2' from Replicate factor
			vVector9_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(vVector9_uses_F[1]);
			// Message to 'vVector9_uses' from Replicate factor
			vVector9_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(vVector9_rep2_B_toDef, vVector9_uses_F_marginal, 1, vVector9_uses_F[1]);
			VectorGaussian vVector9_rep3_B_toDef;
			// Message to 'vVector9_rep3' from Replicate factor
			vVector9_rep3_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(vVector9_uses_F[2]);
			VectorGaussian vVector9_rep3_F_marginal;
			// Message to 'vVector9_rep3' from Replicate factor
			vVector9_rep3_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(vVector9_uses_F[2]);
			// Message to 'vVector9_uses' from Replicate factor
			vVector9_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(vVector9_rep3_B_toDef, vVector9_uses_F_marginal, 2, vVector9_uses_F[2]);
			this.vdouble17_marginal_F = Gamma.Uniform();
			this.vdouble17_uses_F[2] = Gamma.Uniform();
			this.vdouble17_uses_F[1] = Gamma.Uniform();
			// Message to 'vdouble17_marginal' from Variable factor
			this.vdouble17_marginal_F = VariableOp.MarginalAverageConditional<Gamma>(this.vdouble17_uses_B_toDef, this.vGamma2, this.vdouble17_marginal_F);
			Gamma vdouble17_rep2_B_toDef;
			// Message to 'vdouble17_rep2' from Replicate factor
			vdouble17_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.vdouble17_uses_F[1]);
			Gamma vdouble17_rep2_F_marginal;
			// Message to 'vdouble17_rep2' from Replicate factor
			vdouble17_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.vdouble17_uses_F[1]);
			// Message to 'vdouble17_uses' from Replicate factor
			this.vdouble17_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(vdouble17_rep2_B_toDef, vdouble17_uses_F_marginal, 1, this.vdouble17_uses_F[1]);
			Gamma vdouble17_rep3_B_toDef;
			// Message to 'vdouble17_rep3' from Replicate factor
			vdouble17_rep3_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.vdouble17_uses_F[2]);
			Gamma vdouble17_rep3_F_marginal;
			// Message to 'vdouble17_rep3' from Replicate factor
			vdouble17_rep3_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.vdouble17_uses_F[2]);
			// Message to 'vdouble17_uses' from Replicate factor
			this.vdouble17_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(vdouble17_rep3_B_toDef, vdouble17_uses_F_marginal, 2, this.vdouble17_uses_F[2]);
			// Create array for 'vdouble__8_marginal' Forwards messages.
			this.vdouble__8_marginal_F = new DistributionStructArray<Gaussian,double>(23);
			for(int index3 = 0; index3<23; index3++) {
				this.vdouble__8_marginal_F[index3] = Gaussian.Uniform();
				// Message to 'vdouble__8_marginal' from DerivedVariable factor
				this.vdouble__8_marginal_F[index3] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble__8_use_B[index3], this.vdouble__8_F[index3], this.vdouble__8_marginal_F[index3]);
			}
			DistributionStructArray<Gaussian,double> vdouble__10_F;
			// Create array for 'vdouble__10' Forwards messages.
			vdouble__10_F = new DistributionStructArray<Gaussian,double>(23);
			DistributionRefArray<VectorGaussian,Vector> vVector9_rep2_F;
			// Create array for 'vVector9_rep2' Forwards messages.
			vVector9_rep2_F = new DistributionRefArray<VectorGaussian,Vector>(23);
			// Create array for replicates of 'vVector9_rep2_F_index3__AMean'
			DenseVector[] vVector9_rep2_F_index3__AMean = new DenseVector[23];
			DistributionStructArray<Gaussian,double> vdouble__10_use_B;
			// Create array for 'vdouble__10_use' Backwards messages.
			vdouble__10_use_B = new DistributionStructArray<Gaussian,double>(23);
			// Create array for replicates of 'vVector9_rep2_F_index3__AVariance'
			PositiveDefiniteMatrix[] vVector9_rep2_F_index3__AVariance = new PositiveDefiniteMatrix[23];
			DistributionRefArray<VectorGaussian,Vector> vVector9_rep2_B;
			// Create array for 'vVector9_rep2' Backwards messages.
			vVector9_rep2_B = new DistributionRefArray<VectorGaussian,Vector>(23);
			// Create array for 'vdouble__11_marginal' Forwards messages.
			this.vdouble__11_marginal_F = new DistributionStructArray<Gaussian,double>(23);
			// Message to 'vVector9_rep2' from Replicate factor
			vVector9_rep2_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(vVector9_rep2_B_toDef, vVector9_uses_F[1], vVector9_rep2_F_marginal);
			// Create array for 'vdouble__10_marginal' Forwards messages.
			this.vdouble__10_marginal_F = new DistributionStructArray<Gaussian,double>(23);
			DistributionStructArray<Gamma,double> vdouble17_rep2_B;
			// Create array for 'vdouble17_rep2' Backwards messages.
			vdouble17_rep2_B = new DistributionStructArray<Gamma,double>(23);
			DistributionStructArray<Gamma,double> vdouble17_rep2_F;
			// Create array for 'vdouble17_rep2' Forwards messages.
			vdouble17_rep2_F = new DistributionStructArray<Gamma,double>(23);
			DistributionStructArray<Gaussian,double> vdouble__11_F;
			// Create array for 'vdouble__11' Forwards messages.
			vdouble__11_F = new DistributionStructArray<Gaussian,double>(23);
			// Message to 'vdouble17_rep2' from Replicate factor
			vdouble17_rep2_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(vdouble17_rep2_B_toDef, this.vdouble17_uses_F[1], vdouble17_rep2_F_marginal);
			Gaussian vdouble__11_use_B_reduced;
			vdouble__11_use_B_reduced = Gaussian.Uniform();
			for(int index3 = 0; index3<23; index3++) {
				vdouble__10_F[index3] = Gaussian.Uniform();
				vVector9_rep2_B[index3] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
				vVector9_rep2_F[index3] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
				// Message to 'vdouble__10' from InnerProduct factor
				vVector9_rep2_F_index3__AMean[index3] = InnerProductOpBase.AMeanInit(vVector9_rep2_F[index3]);
				// Message to 'vdouble__10' from InnerProduct factor
				vVector9_rep2_F_index3__AVariance[index3] = InnerProductOpBase.AVarianceInit(vVector9_rep2_F[index3]);
				// Message to 'vVector9_rep2' from Replicate factor
				vVector9_rep2_F[index3] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(vVector9_rep2_B[index3], vVector9_rep2_F_marginal, index3, vVector9_rep2_F[index3]);
				this.vdouble__10_marginal_F[index3] = Gaussian.Uniform();
				vdouble__10_use_B[index3] = Gaussian.Uniform();
				// Message to 'vdouble__10' from InnerProduct factor
				vVector9_rep2_F_index3__AVariance[index3] = InnerProductOpBase.AVariance(vVector9_rep2_F[index3], vVector9_rep2_F_index3__AVariance[index3]);
				// Message to 'vdouble__10' from InnerProduct factor
				vVector9_rep2_F_index3__AMean[index3] = InnerProductOpBase.AMean(vVector9_rep2_F[index3], vVector9_rep2_F_index3__AVariance[index3], vVector9_rep2_F_index3__AMean[index3]);
				// Message to 'vdouble__10' from InnerProduct factor
				vdouble__10_F[index3] = InnerProductOpBase.InnerProductAverageConditional(vVector9_rep2_F_index3__AMean[index3], vVector9_rep2_F_index3__AVariance[index3], this.VVector__3[index3]);
				// Message to 'vdouble__10_marginal' from DerivedVariable factor
				this.vdouble__10_marginal_F[index3] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble__10_use_B[index3], vdouble__10_F[index3], this.vdouble__10_marginal_F[index3]);
				vdouble__11_F[index3] = Gaussian.Uniform();
				vdouble17_rep2_B[index3] = Gamma.Uniform();
				vdouble17_rep2_F[index3] = Gamma.Uniform();
				// Message to 'vdouble17_rep2' from Replicate factor
				vdouble17_rep2_F[index3] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(vdouble17_rep2_B[index3], vdouble17_rep2_F_marginal, index3, vdouble17_rep2_F[index3]);
				this.vdouble__11_marginal_F[index3] = Gaussian.Uniform();
				// Message to 'vdouble__11' from GaussianFromMeanAndVariance factor
				vdouble__11_F[index3] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(vdouble__11_use_B_reduced, vdouble__10_F[index3], vdouble17_rep2_F[index3]);
				// Message to 'vdouble__11_marginal' from Variable factor
				this.vdouble__11_marginal_F[index3] = VariableOp.MarginalAverageConditional<Gaussian>(vdouble__11_use_B_reduced, vdouble__11_F[index3], this.vdouble__11_marginal_F[index3]);
			}
			DistributionStructArray<Gaussian,double> vdouble__12_F;
			// Create array for 'vdouble__12' Forwards messages.
			vdouble__12_F = new DistributionStructArray<Gaussian,double>(23);
			DistributionRefArray<VectorGaussian,Vector> vVector9_rep3_F;
			// Create array for 'vVector9_rep3' Forwards messages.
			vVector9_rep3_F = new DistributionRefArray<VectorGaussian,Vector>(23);
			DistributionRefArray<VectorGaussian,Vector> vVector9_rep3_B;
			// Create array for 'vVector9_rep3' Backwards messages.
			vVector9_rep3_B = new DistributionRefArray<VectorGaussian,Vector>(23);
			// Create array for replicates of 'vVector9_rep3_F_index3__AMean'
			DenseVector[] vVector9_rep3_F_index3__AMean = new DenseVector[23];
			// Create array for replicates of 'vVector9_rep3_F_index3__AVariance'
			PositiveDefiniteMatrix[] vVector9_rep3_F_index3__AVariance = new PositiveDefiniteMatrix[23];
			// Create array for 'vdouble__12_marginal' Forwards messages.
			this.vdouble__12_marginal_F = new DistributionStructArray<Gaussian,double>(23);
			// Message to 'vVector9_rep3' from Replicate factor
			vVector9_rep3_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(vVector9_rep3_B_toDef, vVector9_uses_F[2], vVector9_rep3_F_marginal);
			DistributionStructArray<Gaussian,double> vdouble__12_use_B;
			// Create array for 'vdouble__12_use' Backwards messages.
			vdouble__12_use_B = new DistributionStructArray<Gaussian,double>(23);
			// Create array for 'vdouble__13_marginal' Forwards messages.
			this.vdouble__13_marginal_F = new DistributionStructArray<Gaussian,double>(23);
			DistributionStructArray<Gamma,double> vdouble17_rep3_F;
			// Create array for 'vdouble17_rep3' Forwards messages.
			vdouble17_rep3_F = new DistributionStructArray<Gamma,double>(23);
			DistributionStructArray<Gamma,double> vdouble17_rep3_B;
			// Create array for 'vdouble17_rep3' Backwards messages.
			vdouble17_rep3_B = new DistributionStructArray<Gamma,double>(23);
			DistributionStructArray<Gaussian,double> vdouble__13_F;
			// Create array for 'vdouble__13' Forwards messages.
			vdouble__13_F = new DistributionStructArray<Gaussian,double>(23);
			// Message to 'vdouble17_rep3' from Replicate factor
			vdouble17_rep3_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(vdouble17_rep3_B_toDef, this.vdouble17_uses_F[2], vdouble17_rep3_F_marginal);
			Gaussian vdouble__13_use_B_reduced;
			vdouble__13_use_B_reduced = Gaussian.Uniform();
			for(int index3 = 0; index3<23; index3++) {
				vdouble__12_F[index3] = Gaussian.Uniform();
				vVector9_rep3_B[index3] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
				vVector9_rep3_F[index3] = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian2);
				// Message to 'vdouble__12' from InnerProduct factor
				vVector9_rep3_F_index3__AMean[index3] = InnerProductOpBase.AMeanInit(vVector9_rep3_F[index3]);
				// Message to 'vdouble__12' from InnerProduct factor
				vVector9_rep3_F_index3__AVariance[index3] = InnerProductOpBase.AVarianceInit(vVector9_rep3_F[index3]);
				// Message to 'vVector9_rep3' from Replicate factor
				vVector9_rep3_F[index3] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(vVector9_rep3_B[index3], vVector9_rep3_F_marginal, index3, vVector9_rep3_F[index3]);
				this.vdouble__12_marginal_F[index3] = Gaussian.Uniform();
				vdouble__12_use_B[index3] = Gaussian.Uniform();
				// Message to 'vdouble__12' from InnerProduct factor
				vVector9_rep3_F_index3__AVariance[index3] = InnerProductOpBase.AVariance(vVector9_rep3_F[index3], vVector9_rep3_F_index3__AVariance[index3]);
				// Message to 'vdouble__12' from InnerProduct factor
				vVector9_rep3_F_index3__AMean[index3] = InnerProductOpBase.AMean(vVector9_rep3_F[index3], vVector9_rep3_F_index3__AVariance[index3], vVector9_rep3_F_index3__AMean[index3]);
				// Message to 'vdouble__12' from InnerProduct factor
				vdouble__12_F[index3] = InnerProductOpBase.InnerProductAverageConditional(vVector9_rep3_F_index3__AMean[index3], vVector9_rep3_F_index3__AVariance[index3], this.VVector__3[index3]);
				// Message to 'vdouble__12_marginal' from DerivedVariable factor
				this.vdouble__12_marginal_F[index3] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble__12_use_B[index3], vdouble__12_F[index3], this.vdouble__12_marginal_F[index3]);
				vdouble__13_F[index3] = Gaussian.Uniform();
				vdouble17_rep3_B[index3] = Gamma.Uniform();
				vdouble17_rep3_F[index3] = Gamma.Uniform();
				// Message to 'vdouble17_rep3' from Replicate factor
				vdouble17_rep3_F[index3] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(vdouble17_rep3_B[index3], vdouble17_rep3_F_marginal, index3, vdouble17_rep3_F[index3]);
				this.vdouble__13_marginal_F[index3] = Gaussian.Uniform();
				// Message to 'vdouble__13' from GaussianFromMeanAndVariance factor
				vdouble__13_F[index3] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(vdouble__13_use_B_reduced, vdouble__12_F[index3], vdouble17_rep3_F[index3]);
				// Message to 'vdouble__13_marginal' from Variable factor
				this.vdouble__13_marginal_F[index3] = VariableOp.MarginalAverageConditional<Gaussian>(vdouble__13_use_B_reduced, vdouble__13_F[index3], this.vdouble__13_marginal_F[index3]);
			}
			this.Changed_numberOfIterations_vdouble__7_vVector__3_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vdouble__7 and vVector__3</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isInitialised)) {
				return ;
			}
			for(int index3 = 0; index3<23; index3++) {
				this.vdouble__8_F[index3] = Gaussian.Uniform();
				this.vdouble17_rep_B[index3] = Gamma.Uniform();
			}
			// Message to 'vdouble17_rep' from Replicate factor
			this.vdouble17_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.vdouble17_uses_F[0]);
			// Message to 'vdouble17_uses' from Replicate factor
			this.vdouble17_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.vGamma2);
			this.Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__7</summary>
		private void Changed_vdouble__7()
		{
			if (this.Changed_vdouble__7_isDone) {
				return ;
			}
			this.vdouble__7_marginal = new DistributionStructArray<Gaussian,double>(23, delegate(int index3) {
				return Gaussian.Uniform();
			});
			this.vdouble__7_marginal = Distribution.SetPoint<DistributionStructArray<Gaussian,double>,double[]>(this.vdouble__7_marginal, this.Vdouble__7);
			this.Changed_vdouble__7_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vVector__3</summary>
		private void Changed_vVector__3()
		{
			if (this.Changed_vVector__3_isDone) {
				return ;
			}
			this.vVector__3_marginal = new PointMass<Vector[]>(this.VVector__3);
			this.Changed_vVector__3_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'vdouble__8' Forwards messages.
			this.vdouble__8_F = new DistributionStructArray<Gaussian,double>(23);
			this.vGamma2 = Gamma.FromShapeAndRate(1.0, 0.5);
			// Create array for 'vdouble17_rep' Backwards messages.
			this.vdouble17_rep_B = new DistributionStructArray<Gamma,double>(23);
			// Create array for 'vdouble17_uses' Forwards messages.
			this.vdouble17_uses_F = new Gamma[3];
			this.vdouble17_uses_F[0] = Gamma.Uniform();
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3_isDone = false;
				}
				this.Changed_numberOfIterations_vdouble__7_vVector__3_isDone = false;
			}
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_vdouble__7_vVector__3(initialise);
			this.Changed_numberOfIterations_vdouble__7_vVector__3(numberOfIterations);
			this.Changed_vVector__3();
			this.Changed_vdouble__7();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vdouble__7") {
				return this.vdouble__7;
			}
			if (variableName=="vVector__3") {
				return this.vVector__3;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vVector9") {
				return this.VVector9Marginal();
			}
			if (variableName=="vdouble17") {
				return this.Vdouble17Marginal();
			}
			if (variableName=="vdouble__8") {
				return this.Vdouble__8Marginal();
			}
			if (variableName=="vdouble__10") {
				return this.Vdouble__10Marginal();
			}
			if (variableName=="vdouble__11") {
				return this.Vdouble__11Marginal();
			}
			if (variableName=="vdouble__12") {
				return this.Vdouble__12Marginal();
			}
			if (variableName=="vdouble__13") {
				return this.Vdouble__13Marginal();
			}
			if (variableName=="vVector__3") {
				return this.VVector__3Marginal();
			}
			if (variableName=="vdouble__7") {
				return this.Vdouble__7Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vdouble__7") {
				this.vdouble__7 = (double[])value;
				return ;
			}
			if (variableName=="vVector__3") {
				this.vVector__3 = (Vector[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__10' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__10Marginal()
		{
			return this.vdouble__10_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__11' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__11Marginal()
		{
			return this.vdouble__11_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__12' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__12Marginal()
		{
			return this.vdouble__12_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__13' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__13Marginal()
		{
			return this.vdouble__13_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__7Marginal()
		{
			return this.vdouble__7_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__8' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__8Marginal()
		{
			return this.vdouble__8_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble17' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma Vdouble17Marginal()
		{
			return this.vdouble17_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector__3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Vector[]> VVector__3Marginal()
		{
			return this.vVector__3_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector9' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public VectorGaussian VVector9Marginal()
		{
			return this.vVector9_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
