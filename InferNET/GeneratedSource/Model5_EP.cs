// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Maths;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.7.1803.1901 at 6:39 PM on Wednesday, August 15, 2018.
	/// </remarks>
	public partial class Model5_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_vVector22 has executed. Set this to false to force re-execution of Changed_vVector22</summary>
		public bool Changed_vVector22_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'vdouble59'</summary>
		public Gamma vdouble59_marginal_F;
		/// <summary>Message to marginal of 'vdouble60'</summary>
		public Gaussian vdouble60_marginal_F;
		/// <summary>Message to marginal of 'vdouble61'</summary>
		public Gaussian vdouble61_marginal_F;
		/// <summary>Field backing the vVector22 property</summary>
		private Vector VVector22;
		public PointMass<Vector> vVector22_marginal;
		/// <summary>Message to marginal of 'vVector23'</summary>
		public VectorGaussian vVector23_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vVector22'</summary>
		public Vector vVector22
		{
			get {
				return this.VVector22;
			}
			set {
				this.VVector22 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vVector22_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of vVector22</summary>
		private void Changed_vVector22()
		{
			if (this.Changed_vVector22_isDone) {
				return ;
			}
			this.vVector22_marginal = new PointMass<Vector>(this.VVector22);
			VectorGaussian vVectorGaussian7 = VectorGaussian.FromNatural(DenseVector.FromArray(new double[2] {1744.7460836560538, 28.704344345583781}), new PositiveDefiniteMatrix(new double[2, 2] {{493071.92980116926, 6968.9399143843029}, {6968.9399143843029, 100.34330884967395}}));
			this.vVector23_marginal_F = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian7);
			VectorGaussian vVector23_use_B = ArrayHelper.MakeUniform<VectorGaussian>(vVectorGaussian7);
			// Message to 'vVector23_marginal' from Variable factor
			this.vVector23_marginal_F = VariableOp.MarginalAverageConditional<VectorGaussian>(vVector23_use_B, vVectorGaussian7, this.vVector23_marginal_F);
			Gamma vGamma7 = Gamma.FromShapeAndRate(12.108571971274765, 52.199378692499536);
			this.vdouble59_marginal_F = Gamma.Uniform();
			Gamma vdouble59_use_B = Gamma.Uniform();
			// Message to 'vdouble59_marginal' from Variable factor
			this.vdouble59_marginal_F = VariableOp.MarginalAverageConditional<Gamma>(vdouble59_use_B, vGamma7, this.vdouble59_marginal_F);
			Gaussian vdouble60_F = default(Gaussian);
			this.vdouble60_marginal_F = Gaussian.Uniform();
			Gaussian vdouble60_use_B = Gaussian.Uniform();
			DenseVector vVector23_use_F_AMean;
			// Message to 'vdouble60' from InnerProduct factor
			vVector23_use_F_AMean = InnerProductOpBase.AMeanInit(vVectorGaussian7);
			PositiveDefiniteMatrix vVector23_use_F_AVariance;
			// Message to 'vdouble60' from InnerProduct factor
			vVector23_use_F_AVariance = InnerProductOpBase.AVarianceInit(vVectorGaussian7);
			// Message to 'vdouble60' from InnerProduct factor
			vVector23_use_F_AVariance = InnerProductOpBase.AVariance(vVectorGaussian7, vVector23_use_F_AVariance);
			// Message to 'vdouble60' from InnerProduct factor
			vVector23_use_F_AMean = InnerProductOpBase.AMean(vVectorGaussian7, vVector23_use_F_AVariance, vVector23_use_F_AMean);
			// Message to 'vdouble60' from InnerProduct factor
			vdouble60_F = InnerProductOpBase.InnerProductAverageConditional(vVector23_use_F_AMean, vVector23_use_F_AVariance, this.VVector22);
			// Message to 'vdouble60_marginal' from DerivedVariable factor
			this.vdouble60_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble60_use_B, vdouble60_F, this.vdouble60_marginal_F);
			Gaussian vdouble61_F = default(Gaussian);
			this.vdouble61_marginal_F = Gaussian.Uniform();
			Gaussian vdouble61_use_B = Gaussian.Uniform();
			// Message to 'vdouble61' from GaussianFromMeanAndVariance factor
			vdouble61_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(vdouble61_use_B, vdouble60_F, vGamma7);
			// Message to 'vdouble61_marginal' from Variable factor
			this.vdouble61_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble61_use_B, vdouble61_F, this.vdouble61_marginal_F);
			this.Changed_vVector22_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_vVector22();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vVector22") {
				return this.vVector22;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vVector22") {
				return this.VVector22Marginal();
			}
			if (variableName=="vVector23") {
				return this.VVector23Marginal();
			}
			if (variableName=="vdouble59") {
				return this.Vdouble59Marginal();
			}
			if (variableName=="vdouble60") {
				return this.Vdouble60Marginal();
			}
			if (variableName=="vdouble61") {
				return this.Vdouble61Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vVector22") {
				this.vVector22 = (Vector)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble59' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma Vdouble59Marginal()
		{
			return this.vdouble59_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble60' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble60Marginal()
		{
			return this.vdouble60_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble61' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble61Marginal()
		{
			return this.vdouble61_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector22' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Vector> VVector22Marginal()
		{
			return this.vVector22_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector23' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public VectorGaussian VVector23Marginal()
		{
			return this.vVector23_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
